from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import rsa, ec

def generate_keypairs():
    # Generate RSA key pair
    rsa_private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )
    rsa_public_key = rsa_private_key.public_key()

    # Generate ECC key pair
    ecc_private_key = ec.generate_private_key(ec.SECP256R1(), default_backend())
    ecc_public_key = ecc_private_key.public_key()

    return rsa_private_key, rsa_public_key, ecc_private_key, ecc_public_key

def sign_and_verify(data, rsa_private_key, ecc_private_key):
    # Sign data with RSA private key
    rsa_signature = rsa_private_key.sign(
        data,
        padding=rsa.PSS(
            mgf=rsa.MGF1(hashes.SHA256()),
            salt_length=rsa.PSS.MAX_LENGTH
        ),
        algorithm=hashes.SHA256()
    )

    # Verify RSA signature
    try:
        rsa_public_key.verify(
            rsa_signature,
            data,
            padding=rsa.PSS(
                mgf=rsa.MGF1(hashes.SHA256()),
                salt_length=rsa.PSS.MAX_LENGTH
            ),
            algorithm=hashes.SHA256()
        )
        print("RSA Signature is valid.")
    except InvalidSignature:
        print("RSA Signature is invalid.")

    # Sign data with ECC private key
    ecc_signature = ecc_private_key.sign(
        data,
        ec.ECDSA(hashes.SHA256())
    )

    # Verify ECC signature
    try:
        ecc_public_key.verify(
            ecc_signature,
            data,
            ec.ECDSA(hashes.SHA256())
        )
        print("ECC Signature is valid.")
    except InvalidSignature:
        print("ECC Signature is invalid.")

# Example usage
rsa_private_key, rsa_public_key, ecc_private_key, ecc_public_key = generate_keypairs()
data = b"Data to be signed"
sign_and_verify(data, rsa_private_key, ecc_private_key)
